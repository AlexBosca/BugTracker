name: Main CI/CD workflow

on:
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - master

jobs:
  backend:
    name: Backend Job
    runs-on: ubuntu-latest

    # services:
    #   postgres:
    #     image: postgres:latest
    #     env:
    #       POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
    #       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    #       POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
    #       POSTGRES_PORT: ${{ secrets.POSTGRES_PORT}}
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd "pg_isready -U postgres -d bugtracker" 
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
      # - name: Debug Environment Variables
      #   run: |
      #     echo "POSTGRES_HOST: $POSTGRES_HOST"
      #     echo "POSTGRES_PORT: $POSTGRES_PORT"
      #     echo "POSTGRES_USER: $POSTGRES_USER"
      #     echo "POSTGRES_PASSWORD: $POSTGRES_PASSWORD"

      # - name: Test PostgreSQL Connection
      #   run: |
      #     pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER
      #     psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -d $POSTGRES_DB -c "\l"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test
        working-directory: ./backend
        run: mvn clean test package

      - name: SonarCloud Scan
        working-directory: ./backend
        run: mvn sonar:sonar -Dsonar.projectKey=ro.alexportfolio:backend -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  
      - name: Install jq
        run: sudo apt-get install -y jq
      

      - name: Wait for Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Waiting for Quality Gate result..."
          STATUS="PENDING"
          MAX_WAIT=300 # maximum wait time in seconds
          WAIT_INTERVAL=10 # interval between checks in seconds
          WAIT_TIME=0
          while [ "$STATUS" == "PENDING" ] && [ $WAIT_TIME -lt $MAX_WAIT ]; do
            RESPONSE=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=ro.alexportfolio:backend&pullRequest=${{ github.event.pull_request.number }}")
            STATUS=$(echo $RESPONSE | jq -r '.projectStatus.status')
            if [ "$STATUS" == "OK" ]; then
              echo "Quality Gate passed!"
              exit 0
            elif [ "$STATUS" == "ERROR" ]; then
              echo "Quality Gate failed!"
              echo $RESPONSE | jq
              exit 1
            else
              echo "Waiting for analysis to complete..."
              sleep $WAIT_INTERVAL
              WAIT_TIME=$((WAIT_TIME + WAIT_INTERVAL))
            fi
          done
          echo "Quality Gate status is still pending after $MAX_WAIT seconds. Failing the job."
          exit 1

      - name: Notify Failure
        if: failure()
        run: echo "SonarCloud Quality Gate failed. Please fix the issues."

  # build-frontend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'

  #     - name: Cache Node Modules
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           npm-${{ runner.os }}-

  #     - name: Install Dependencies
  #       working-directory: ./frontend
  #       run: npm install

  #     - name: Lint Frontend
  #       working-directory: ./frontend
  #       run: npm run lint

  #     - name: Test Frontend
  #       working-directory: ./frontend
  #       run: npm run test -- --watch=false

  #     - name: Generate Coverage Report
  #       working-directory: ./frontend
  #       run: npm run test -- --code-coverage

  #     - name: Run SonarCloud Analysis for Frontend
  #       working-directory: ./frontend
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: npx sonar-scanner

# jobs:
#   trigger-backend:
#     name: Trigger Backend Workflow
#     runs-on: ubuntu-latest
#     steps:
#       - name: Trigger Backend Workflow
#         run: |
#           curl -X POST \
#           -H "Accept: application/vnd.github.v3+json" \
#           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#           https://api.github.com/repos/${{ github.repository }}/dispatches \
#           -d '{"event_type":"trigger-backend"}'

#   trigger-frontend:
#     name: Trigger Frontend Workflow
#     runs-on: ubuntu-latest
#     steps:
#       - name: Trigger Frontend Workflow
#         run: |
#           curl -X POST \
#           -H "Accept: application/vnd.github.v3+json" \
#           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#           https://api.github.com/repos/${{ github.repository }}/dispatches \
#           -d '{"event_type":"trigger-frontend"}'
