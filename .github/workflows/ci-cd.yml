name: Main CI/CD workflow

on:
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - master

jobs:
  backend:
    name: Backend Job
    runs-on: ubuntu-latest

    # services:
    #   postgres:
    #     image: postgres:latest
    #     env:
    #       POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
    #       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    #       POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
    #       POSTGRES_PORT: ${{ secrets.POSTGRES_PORT}}
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd "pg_isready -U postgres -d bugtracker" 
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test
        working-directory: ./backend
        run: mvn clean test package verify

      # - name: Parse Unit Test Report
      #   id: junit-summary
      #   run: |
      #     TESTS=$(grep -oP '(?<=tests=").*?(?=")' backend/target/surefire-reports/TEST*.xml | awk '{s+=$1} END {print s}')
      #     FAILURES=$(grep -oP '(?<=failures=").*?(?=")' backend/target/surefire-reports/TEST*.xml | awk '{s+=$1} END {print s}')
      #     SKIPPED=$(grep -oP '(?<=skipped=").*?(?=")' backend/target/surefire-reports/TEST*.xml | awk '{s+=$1} END {print s}')
      #     ERRORS=$(grep -oP '(?<=errors=").*?(?=")' backend/target/surefire-reports/TEST*.xml | awk '{s+=$1} END {print s}')
      #     SUCCESS=$((TESTS - FAILURES - SKIPPED - ERRORS))
      #     echo "tests=$TESTS" >> $GITHUB_OUTPUT
      #     echo "failures=$FAILURES" >> $GITHUB_OUTPUT
      #     echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
      #     echo "errors=$ERRORS" >> $GITHUB_OUTPUT
      #     echo "success=$SUCCESS" >> $GITHUB_OUTPUT

      - name: Run Checkstyle
        working-directory: ./backend
        run: mvn checkstyle:checkstyle

      # - name: Parse Checkstyle Report
      #   id: checkstyle-summary
      #   run: |
      #     ERRORS=$(grep -c "<error " backend/target/checkstyle-result.xml)
      #     echo "errors=$ERRORS" >> $GITHUB_OUTPUT

      # - name: Post Summary Comment
      #   uses: marocchino/sticky-pull-request-comment@v2
      #   if: ${{ github.event.pull_request.number != '' }}
      #   with:
      #     message: |
      #       ### üß™ Unit Test Report
      #       - **üìä Total Tests**: ${{ steps.junit-summary.outputs.tests }}
      #       - **‚úÖ Successful Tests**: ${{ steps.junit-summary.outputs.success }}
      #       - **‚ùå Fail Tests**: ${{ steps.junit-summary.outputs.failures }}
      #       - **‚ö†Ô∏è Skipped Tests**: ${{ steps.junit-summary.outputs.skipped }}

      - name: Publish Backend Unit Test Report
        uses: turing85/publish-report@v2
        with:
          comment-header: üß™ Backend Unit Test Report
          comment-message-success: |
            <details>
              <summary><h3>üéâ {0} passed</h3></summary>

              <h4>üß™ Unit Tests Results </h4>

              | Passed | Failed | Skipped |
              |--------|--------|---------|
              | ‚úÖ {1} | ‚ùå {2} | ‚ö†Ô∏è {3}   |

              You can see the report [here]({4}).
            </details>
          comment-message-failure: |
            <details>
              <summary><h3>‚õàÔ∏è {0} failed</h3></summary>

              <h4>üß™ Unit Tests Results </h4>

              | Passed | Failed | Skipped |
              |--------|--------|---------|
              | ‚úÖ {1} | ‚ùå {2} | ‚ö†Ô∏è {3}   |

              You can see the report [here]({4}).
            </details>
          report-fail-on-error: true
          report-name: Backend Unit Tests
          report-path: 'backend/target/surefire-reports/TEST*.xml'
          report-reporter: java-junit
          recreate-comment: true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: './backend'
          args: >
            -Dsonar.projectKey=ro.alexportfolio:backend 
            -Dsonar.organization=bugtracker 
            -Dsonar.host.url=https://sonarcloud.io 
            -Dsonar.token=$SONAR_TOKEN
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml 
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
            -Dsonar.java.binaries=target/classes

      - name: SonarCloud Quality Gate
        uses: ./.github/actions/check-quality-gate
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          sonar-project-key: ro.alexportfolio:backend
          if: ${{ github.event.pull_request.number != '' }}
          pull_request: ${{ github.event.pull_request.number }}


      # - name: SonarCloud Scan
      #   working-directory: ./backend
      #   run: |
      #     mvn \
      #       package \
      #       sonar:sonar \
      #       -Dsonar.projectKey=ro.alexportfolio:backend \
      #       -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
      #       -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
      #       -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
  
      # - name: Install jq
      #   run: sudo apt-get install -y jq

      # - name: Wait for Quality Gate
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     echo "Waiting for Quality Gate result..."
      #     STATUS="PENDING"
      #     MAX_WAIT=300 # maximum wait time in seconds
      #     WAIT_INTERVAL=10 # interval between checks in seconds
      #     WAIT_TIME=0
      #     while [ "$STATUS" == "PENDING" ] && [ $WAIT_TIME -lt $MAX_WAIT ]; do
      #       RESPONSE=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=ro.alexportfolio:backend&pullRequest=${{ github.event.pull_request.number }}")
      #       STATUS=$(echo $RESPONSE | jq -r '.projectStatus.status')
      #       if [ "$STATUS" == "OK" ]; then
      #         echo "Quality Gate passed!"
      #         exit 0
      #       elif [ "$STATUS" == "ERROR" ]; then
      #         echo "Quality Gate failed!"
      #         echo $RESPONSE | jq
      #         exit 1
      #       else
      #         echo "Waiting for analysis to complete..."
      #         sleep $WAIT_INTERVAL
      #         WAIT_TIME=$((WAIT_TIME + WAIT_INTERVAL))
      #       fi
      #     done
      #     echo "Quality Gate status is still pending after $MAX_WAIT seconds. Failing the job."
      #     exit 1

      # - name: Notify Failure
      #   if: failure()
      #   run: echo "SonarCloud Quality Gate failed. Please fix the issues."

  frontend:
    name: Frontend Job
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     # command: ['npm run lint', 'npm run test -- --watch=false', 'npm run test -- --code-coverage', 'npx sonar-scanner  -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=bugtracker_frontend -Dsonar.organization=bugtracker -Dsonar.javascript.lcov.reportPaths=coverage/frontend/lcov.info -Dsonar.token=$SONAR_TOKEN']
    #     # command: ['npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage', 'npx sonar-scanner  -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=bugtracker_frontend -Dsonar.organization=bugtracker -Dsonar.javascript.lcov.reportPaths=coverage/frontend/lcov.info -Dsonar.token=$SONAR_TOKEN']
    #     command: ['npm run lint', 'npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Setup Node
        uses: ./.github/actions/checkout-and-setup
        with:
          tool-name: 'node'
          tool-version: '22.12.0'
          working-directory: './frontend'

      - name: Lint Code
        run: npm run lint
        working-directory: ./frontend

      - name: Run Unit Tests
        run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
        working-directory: frontend

      - name: Publish Frontend Unit Tests Report
        uses: turing85/publish-report@v2
        with:
          comment-header: üß™ Frontend Unit Test Report
          comment-message-success: |
            <details>
              <summary><h3>üéâ {0} passed</h3></summary>

              <h4>üß™ Unit Tests Results </h4>

              | Passed | Failed | Skipped |
              |--------|--------|---------|
              | ‚úÖ {1} | ‚ùå {2} | ‚ö†Ô∏è {3}   |

              You can see the report [here]({4}).
            </details>
          comment-message-failure: |
            <details>
              <summary><h3>‚õàÔ∏è {0} failed</h3></summary>

              <h4>üß™ Unit Tests Results </h4>

              | Passed | Failed | Skipped |
              |--------|--------|---------|
              | ‚úÖ {1} | ‚ùå {2} | ‚ö†Ô∏è {3}   |

              You can see the report [here]({4}).
            </details>
          report-fail-on-error: true
          report-name: Frontend Unit Tests
          report-path: 'frontend/test-results/unit-test-results.xml'
          recreate-comment: true
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: './frontend'
          args: >
            -Dsonar.projectKey=bugtracker_frontend 
            -Dsonar.organization=bugtracker 
            -Dsonar.host.url=https://sonarcloud.io 
            -Dsonar.flex.cobertura.reportPaths=coverage/cobertura-coverage.xml 
            -Dsonar.token=$SONAR_TOKEN
            -Dsonar.eslint.reportPaths=eslint-report.json
        
      - name: SonarCloud Quality Gate
        uses: ./.github/actions/check-quality-gate
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          sonar-project-key: bugtracker_frontend
          if: ${{ github.event.pull_request.number != '' }}
          pull_request: ${{ github.event.pull_request.number }}


  # build-frontend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'

  #     - name: Cache Node Modules
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           npm-${{ runner.os }}-

  #     - name: Install Dependencies
  #       working-directory: ./frontend
  #       run: npm install

  #     - name: Lint Frontend
  #       working-directory: ./frontend
  #       run: npm run lint

  #     - name: Test Frontend
  #       working-directory: ./frontend
  #       run: npm run test -- --watch=false

  #     - name: Generate Coverage Report
  #       working-directory: ./frontend
  #       run: npm run test -- --code-coverage

  #     - name: Run SonarCloud Analysis for Frontend
  #       working-directory: ./frontend
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: npx sonar-scanner

# jobs:
#   trigger-backend:
#     name: Trigger Backend Workflow
#     runs-on: ubuntu-latest
#     steps:
#       - name: Trigger Backend Workflow
#         run: |
#           curl -X POST \
#           -H "Accept: application/vnd.github.v3+json" \
#           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#           https://api.github.com/repos/${{ github.repository }}/dispatches \
#           -d '{"event_type":"trigger-backend"}'

#   trigger-frontend:
#     name: Trigger Frontend Workflow
#     runs-on: ubuntu-latest
#     steps:
#       - name: Trigger Frontend Workflow
#         run: |
#           curl -X POST \
#           -H "Accept: application/vnd.github.v3+json" \
#           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#           https://api.github.com/repos/${{ github.repository }}/dispatches \
#           -d '{"event_type":"trigger-frontend"}'
